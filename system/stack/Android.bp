package {
    // See: http://go/android-license-faq
    // A large-scale-change added 'default_applicable_licenses' to import
    // all of the 'license_kinds' from "system_bt_license"
    // to get the below license kinds:
    //   SPDX-license-identifier-Apache-2.0
    //   SPDX-license-identifier-BSD
    default_applicable_licenses: ["system_bt_license"],
}

crypto_toolbox_srcs = [
    "crypto_toolbox/aes.cc",
    "crypto_toolbox/aes_cmac.cc",
    "crypto_toolbox/crypto_toolbox.cc",
]

cc_test_library {
    name: "crypto_toolbox_for_tests",
    static_libs: ["libchrome"],
    defaults: ["fluoride_defaults"],
    host_supported: true,
    include_dirs: [
        "packages/modules/Bluetooth/system",
    ],
    srcs: crypto_toolbox_srcs,
}

// Bluetooth stack static library for target
cc_library_static {
    name: "libbt-stack",
    defaults: ["fluoride_basic_defaults"],
    local_include_dirs: [
        "avct",
        "avdt",
        "avrc",
        "bnep",
        "btm",
        "eatt",
        "gap",
        "gatt",
        "hid",
        "include",
        "l2cap",
        "metrics",
        "pan",
        "sdp",
        "smp",
        "srvc",
    ],
    header_libs: [
        "libbluetooth_headers",
    ],
    include_dirs: [
        "external/aac/libAACdec/include",
        "external/aac/libAACenc/include",
        "external/aac/libSYS/include",
        "external/libldac/abr/inc",
        "external/libldac/inc",
        "external/libopus/include",
        "packages/modules/Bluetooth/system",
        "packages/modules/Bluetooth/system/bta/include",
        "packages/modules/Bluetooth/system/bta/sys",
        "packages/modules/Bluetooth/system/btif/include",
        "packages/modules/Bluetooth/system/device/include",
        "packages/modules/Bluetooth/system/gd",
        "packages/modules/Bluetooth/system/gd/hal",
        "packages/modules/Bluetooth/system/gd/rust/shim",
        "packages/modules/Bluetooth/system/internal_include",
        "packages/modules/Bluetooth/system/udrv/include",
        "packages/modules/Bluetooth/system/vnd/ble",
        "packages/modules/Bluetooth/system/vnd/include",
    ],
    generated_headers: [
        "BluetoothGeneratedDumpsysDataSchema_h",
        "BluetoothGeneratedPackets_h",
    ],
    srcs: crypto_toolbox_srcs + [
        "a2dp/a2dp_aac.cc",
        "a2dp/a2dp_aac_decoder.cc",
        "a2dp/a2dp_aac_encoder.cc",
        "a2dp/a2dp_api.cc",
        "a2dp/a2dp_codec_config.cc",
        "a2dp/a2dp_sbc.cc",
        "a2dp/a2dp_sbc_decoder.cc",
        "a2dp/a2dp_sbc_encoder.cc",
        "a2dp/a2dp_sbc_up_sample.cc",
        "a2dp/a2dp_vendor.cc",
        "a2dp/a2dp_vendor_aptx.cc",
        "a2dp/a2dp_vendor_aptx_encoder.cc",
        "a2dp/a2dp_vendor_aptx_hd.cc",
        "a2dp/a2dp_vendor_aptx_hd_encoder.cc",
        "a2dp/a2dp_vendor_ldac.cc",
        "a2dp/a2dp_vendor_ldac_decoder.cc",
        "a2dp/a2dp_vendor_ldac_encoder.cc",
        "a2dp/a2dp_vendor_opus.cc",
        "a2dp/a2dp_vendor_opus_decoder.cc",
        "a2dp/a2dp_vendor_opus_encoder.cc",
        "avct/avct_api.cc",
        "avct/avct_bcb_act.cc",
        "avct/avct_ccb.cc",
        "avct/avct_l2c.cc",
        "avct/avct_l2c_br.cc",
        "avct/avct_lcb.cc",
        "avct/avct_lcb_act.cc",
        "avdt/avdt_ad.cc",
        "avdt/avdt_api.cc",
        "avdt/avdt_ccb.cc",
        "avdt/avdt_ccb_act.cc",
        "avdt/avdt_l2c.cc",
        "avdt/avdt_msg.cc",
        "avdt/avdt_scb.cc",
        "avdt/avdt_scb_act.cc",
        "avrc/avrc_api.cc",
        "avrc/avrc_bld_ct.cc",
        "avrc/avrc_bld_tg.cc",
        "avrc/avrc_opt.cc",
        "avrc/avrc_pars_ct.cc",
        "avrc/avrc_pars_tg.cc",
        "avrc/avrc_sdp.cc",
        "avrc/avrc_utils.cc",
        "bnep/bnep_api.cc",
        "bnep/bnep_main.cc",
        "bnep/bnep_utils.cc",
        "btm/hfp_msbc_decoder.cc",
        "btm/hfp_msbc_encoder.cc",
        "hid/hidd_api.cc",
        "hid/hidd_conn.cc",
        "hid/hidh_api.cc",
        "hid/hidh_conn.cc",
        "pan/pan_api.cc",
        "pan/pan_main.cc",
        "pan/pan_utils.cc",
    ],
    static_libs: [
        "libbt-hci",
        "libbt-stack-core",
    ],
    whole_static_libs: [
        "libaptx_enc",
        "libaptxhd_enc",
        "libcom.android.sysprop.bluetooth",
        "libldacBT_abr",
        "libldacBT_enc",
    ],
    host_supported: true,
    min_sdk_version: "Tiramisu",
}

filegroup {
    name: "LegacyStackSdp",
    srcs: [
        "sdp/sdp_api.cc",
        "sdp/sdp_db.cc",
        "sdp/sdp_discovery.cc",
        "sdp/sdp_main.cc",
        "sdp/sdp_server.cc",
        "sdp/sdp_utils.cc",
    ],
}

cc_library_static {
    name: "libbt-stack-core",
    defaults: ["fluoride_basic_defaults"],
    local_include_dirs: [
        "avct",
        "avdt",
        "avrc",
        "bnep",
        "btm",
        "eatt",
        "gap",
        "gatt",
        "hid",
        "include",
        "l2cap",
        "metrics",
        "pan",
        "sdp",
        "smp",
        "srvc",
    ],
    header_libs: [
        "libbluetooth_headers",
    ],
    include_dirs: [
        "packages/modules/Bluetooth/system",
        "packages/modules/Bluetooth/system/bta/include",
        "packages/modules/Bluetooth/system/bta/sys",
        "packages/modules/Bluetooth/system/btif/include",
        "packages/modules/Bluetooth/system/gd",
        "packages/modules/Bluetooth/system/gd/rust/shim",
        "packages/modules/Bluetooth/system/internal_include",
        "packages/modules/Bluetooth/system/udrv/include",
        "packages/modules/Bluetooth/system/vnd/ble",
        "packages/modules/Bluetooth/system/vnd/include",
    ],
    srcs: crypto_toolbox_srcs + [
        ":LegacyStackSdp",
        "acl/acl.cc",
        "acl/ble_acl.cc",
        "acl/btm_acl.cc",
        "acl/btm_ble_connection_establishment.cc",
        "acl/btm_pm.cc",
        "arbiter/acl_arbiter.cc",
        "btm/ble_advertiser_hci_interface.cc",
        "btm/ble_scanner_hci_interface.cc",
        "btm/btm_ble.cc",
        "btm/btm_ble_addr.cc",
        "btm/btm_ble_adv_filter.cc",
        "btm/btm_ble_batchscan.cc",
        "btm/btm_ble_bgconn.cc",
        "btm/btm_ble_cont_energy.cc",
        "btm/btm_ble_gap.cc",
        "btm/btm_ble_multi_adv.cc",
        "btm/btm_ble_privacy.cc",
        "btm/btm_ble_scanner.cc",
        "btm/btm_client_interface.cc",
        "btm/btm_dev.cc",
        "btm/btm_devctl.cc",
        "btm/btm_inq.cc",
        "btm/btm_iot_config.cc",
        "btm/btm_iso.cc",
        "btm/btm_main.cc",
        "btm/btm_scn.cc",
        "btm/btm_sco.cc",
        "btm/btm_sco_hci.cc",
        "btm/btm_sco_hfp_hal.cc",
        "btm/btm_sec.cc",
        "btu/btu_hcif.cc",
        "btu/btu_task.cc",
        "eatt/eatt.cc",
        "gap/gap_ble.cc",
        "gap/gap_conn.cc",
        "gatt/att_protocol.cc",
        "gatt/connection_manager.cc",
        "gatt/gatt_api.cc",
        "gatt/gatt_attr.cc",
        "gatt/gatt_auth.cc",
        "gatt/gatt_cl.cc",
        "gatt/gatt_db.cc",
        "gatt/gatt_main.cc",
        "gatt/gatt_sr.cc",
        "gatt/gatt_sr_hash.cc",
        "gatt/gatt_utils.cc",
        "hcic/hciblecmds.cc",
        "hcic/hcicmds.cc",
        "l2cap/l2c_api.cc",
        "l2cap/l2c_ble.cc",
        "l2cap/l2c_csm.cc",
        "l2cap/l2c_fcr.cc",
        "l2cap/l2c_link.cc",
        "l2cap/l2c_main.cc",
        "l2cap/l2c_utils.cc",
        "metrics/stack_metrics_logging.cc",
        "rfcomm/port_api.cc",
        "rfcomm/port_rfc.cc",
        "rfcomm/port_utils.cc",
        "rfcomm/rfc_l2cap_if.cc",
        "rfcomm/rfc_mx_fsm.cc",
        "rfcomm/rfc_port_fsm.cc",
        "rfcomm/rfc_port_if.cc",
        "rfcomm/rfc_ts_frames.cc",
        "rfcomm/rfc_utils.cc",
        "smp/p_256_curvepara.cc",
        "smp/p_256_ecc_pp.cc",
        "smp/p_256_multprecision.cc",
        "smp/smp_act.cc",
        "smp/smp_api.cc",
        "smp/smp_br_main.cc",
        "smp/smp_keys.cc",
        "smp/smp_l2c.cc",
        "smp/smp_main.cc",
        "smp/smp_utils.cc",
        "srvc/srvc_dis.cc",
        "srvc/srvc_eng.cc",
    ],
    generated_headers: [
        "BluetoothGeneratedDumpsysDataSchema_h",
    ],
    cflags: [
        /* we export all classes, so change default visibility, instead of having EXPORT_SYMBOL on each class*/
        "-fvisibility=default",
    ],
    static_libs: [
        "libbluetooth_core_rs",
        "libbt-hci",
    ],
    host_supported: true,
    min_sdk_version: "Tiramisu",
}

// Bluetooth stack connection multiplexing
cc_test {
    name: "net_test_gatt_conn_multiplexing",
    defaults: [
        "bluetooth_gtest_x86_asan_workaround",
        "fluoride_defaults",
        "mts_defaults",
    ],
    host_supported: true,
    test_suites: ["general-tests"],
    local_include_dirs: [
        "btm",
        "include",
        "test/common",
    ],
    include_dirs: [
        "packages/modules/Bluetooth/system",
        "packages/modules/Bluetooth/system/gd",
        "packages/modules/Bluetooth/system/internal_include",
    ],
    srcs: [
        ":TestCommonMainHandler",
        "gatt/connection_manager.cc",
        "test/common/mock_btm_api_layer.cc",
        "test/gatt_connection_manager_test.cc",
    ],
    shared_libs: [
        "libcutils",
    ],
    static_libs: [
        "libbluetooth-types",
        "libbt-common",
        "libchrome",
        "libevent",
        "libgmock",
        "liblog",
    ],
    sanitize: {
        cfi: false,
    },
}

// Iso manager unit tests
cc_test {
    name: "net_test_btm_iso",
    test_suites: ["device-tests"],
    host_supported: true,
    test_options: {
        unit_test: true,
    },
    defaults: [
        "bluetooth_gtest_x86_asan_workaround",
        "fluoride_defaults",
        "mts_defaults",
    ],
    local_include_dirs: [
        "btm",
        "include",
        "test/common",
    ],
    include_dirs: [
        "packages/modules/Bluetooth/system",
        "packages/modules/Bluetooth/system/gd",
    ],
    srcs: [
        ":TestCommonStackConfig",
        "btm/btm_iso.cc",
        "test/btm_iso_test.cc",
        "test/common/mock_controller.cc",
        "test/common/mock_gatt_layer.cc",
        "test/common/mock_hcic_layer.cc",
    ],
    static_libs: [
        "libbt-common",
        "libchrome",
        "libgmock",
        "liblog",
        "libosi",
    ],
    sanitize: {
        cfi: true,
        scs: true,
        address: true,
        all_undefined: true,
        integer_overflow: true,
        diag: {
            undefined: true,
        },
    },
}

// EATT unit tests
cc_test {
    name: "net_test_eatt",
    test_suites: ["device-tests"],
    host_supported: true,
    test_options: {
        unit_test: true,
    },
    defaults: [
        "bluetooth_gtest_x86_asan_workaround",
        "fluoride_defaults",
        "mts_defaults",
    ],
    local_include_dirs: [
        "btm",
        "eatt",
        "gatt",
        "include",
        "l2cap",
        "test/common",
    ],
    include_dirs: [
        "packages/modules/Bluetooth/system",
        "packages/modules/Bluetooth/system/gd",
        "packages/modules/Bluetooth/system/internal_include",
    ],
    srcs: [
        ":TestCommonMainHandler",
        ":TestCommonStackConfig",
        "eatt/eatt.cc",
        "test/common/mock_btif_storage.cc",
        "test/common/mock_btm_api_layer.cc",
        "test/common/mock_controller.cc",
        "test/common/mock_gatt_layer.cc",
        "test/common/mock_l2cap_layer.cc",
        "test/eatt/eatt_test.cc",
        "test/gatt/mock_gatt_utils_ref.cc",
    ],
    shared_libs: [
        "libcrypto",
        "libcutils",
    ],
    static_libs: [
        "libbt-common",
        "libbt-protos-lite",
        "libchrome",
        "libevent",
        "libgmock",
        "liblog",
        "libosi",
        "libprotobuf-cpp-lite",
    ],
    sanitize: {
        cfi: false,
    },
}
